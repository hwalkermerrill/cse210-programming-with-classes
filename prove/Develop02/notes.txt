// Written By Harrison Merrill, 2025-05-09, CSE 210

// Functional Requirements:
// This program must contain the following features:

// 1. Write a new entry - Show the user a random prompt (from a list that you create),
// and save their response, the prompt, and the date as an Entry.
// 2. Display the journal - Iterate through all entries in the journal and display them
// to the screen.
// 3. Save the journal to a file - Prompt the user for a filename and then save the
// current journal (the complete list of entries) to that file location.
// 4. Load the journal from a file - Prompt the user for a filename and then load the
// journal (a complete list of entries) from that file. This should replace any entries
// currently stored in the journal.
// 5. Provide a menu that allows the user choose these options

// Your list of prompts must contain at least five different prompts.
// Make sure to add your own prompts to the list, but the following are examples
// to help get you started:
// - Who was the most interesting person I interacted with today?
// - What was the best part of my day?
// - How did I see the hand of the Lord in my life today?
// - What was the strongest emotion I felt today?
// - If I had one thing I could do over today, what would it be?

// Design Requirements:
// In addition, your program must:

// 1. Contain classes for the major components in the program.
// 2. Contain at least two classes in addition to the Program class.
// 3. Demonstrate the principle of abstraction by using member variables and methods
// appropriately.

// Exceeding Requirements:
Meeting the core requirements makes your program eligible to receive a 93%.
To receive 100% on the assignment, you need to show creativity and exceed these
requirements. Here are some ideas you might consider:

> Think of other problems that keep people from writing in their journal and
address one of those.
> Save other information in the journal entry.
> Improve the process of saving and loading to save as a .csv file that could be opened in
Excel (make sure to account for quotation marks and commas correctly in your content).
> Save or load your document to a database or use a different library or format such as
JSON for storage.

Report on what you have done to exceed requirements by adding a description of it in a comment in the Program.cs file.


// Design Plan: 
What does the program do?
    help people record the events of their day by supplying 
    prompts and then saving their responses along with the 
    question and the date to a file.
 
What user inputs does it have?
    Date
    Journal entree
    read/write prompt
    filename
 
What output does it produce?
    random prompt
    Send to text file
    previous journal entries
 
What Classes do we want?
    program
        -Skip prompt?
        -Save to file()
        -Load from file()
 
    entry
        -date (prompt user for date)
        -entry
        -title/theme?
        -prompt
        -
    prompt
        -number
        -text (dict)
        
demonstrate abstraction using member variables and methods appropriately


 
prompt day = new prompt;
prompt _words = "What did you do today?"
 
datetime = Console.WriteLine();